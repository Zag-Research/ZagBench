Class {
	#name : 'RandomMatrix',
	#superclass : 'Object',
	#instVars : [
		'matrix'
	],
	#classInstVars : [
		'size'
	],
	#category : 'ZagBench-RandomArrayLinearCongruentialGenerator',
	#package : 'ZagBench',
	#tag : 'RandomArrayLinearCongruentialGenerator'
}

{ #category : 'as yet unclassified' }
RandomMatrix >> CreateRowsandColumns [
	"comment stating purpose of instance-side method"

	"scope: class-variables  &  instance-variables"

	| random |
	random := Random new.
	^ Array rows: 10 columns: 6 tabulate: [ :i :j | random next ]
]

{ #category : 'generate' }
RandomMatrix >> Lcg [
	"|lcg |
	lcg := BenchRandom new.
	^ Array rows: 10 columns: 6 tabulate: [ :i :j | random next ]"
	| randomArray size seed a c m currentValue rand lcg|
BenchRandom class >> lcg .
	^ self new initialize. 
	
	size := 10. "Define the size of the array"
	seed := 12345. "Choose an initial seed value"
	a := 1103515245. "Multiplier constant"
	c := 12345. "Increment constant"
	m := 2 raisedTo: 31. "Modulus "
	randomArray := OrderedCollection new. "Create an empty collection to store random numbers"
	rand := seed. "Set the initial value to the seed"
	
	
	rand := BenchRandom between: 0 and: 100.
	"(1 to: 10) collect: [ :ignore | rand nextFloat ]."
	1 to: size do: [ :i |
		rand := a * rand + c \\ m. "Linear congruential generator formula"
		randomArray add: rand / m * 100 ."Scale the result to a range between 0 and 100" ].

	^ randomArray asArray "Return the array" 
	


	
	
]

{ #category : 'generate' }
RandomMatrix >> LinearCongruentionalGenerator [

	| randomArray size seed a c m currentValue |
	size := 10. "Define the size of the array"
	seed := 12345. "Choose an initial seed value"
	a := 1103515245. "Multiplier constant"
	c := 12345. "Increment constant"
	m := 2 raisedTo: 31. "Modulus (this value is usually large)"
	randomArray := OrderedCollection new. "Create an empty collection to store random numbers"
	currentValue := seed. "Set the initial value to the seed"

	1 to: size do: [ :i |
		currentValue := a * currentValue + c \\ m. "Linear congruential generator formula"
		randomArray add: currentValue / m * 100 "Scale the result to a range between 0 and 100" ].

	^ randomArray asArray "Return the array"
]

{ #category : 'as yet unclassified' }
RandomMatrix >> makeInvertable [

	matrix withIndexDo: [ :row :index |
		row
			at: index
			put: (row inject: 0 into: [ :sum :each | sum + each abs ]) ]
]

{ #category : 'as yet unclassified' }
RandomMatrix >> randomSquare: anInteger [ 
	^ self randomWithRows: anInteger columns: anInteger
]

{ #category : 'initialization' }
RandomMatrix >> randomWithRows: rows columns: cols [
	"comment stating purpose of instance-side method"

	"scope: class-variables  &  instance-variables"

	| random |
	random := Random new.
	matrix := (1 to: rows) collect: [ :i |
		          (1 to: cols) collect: [ :j | random next ] ]
]
